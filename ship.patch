diff '--exclude=build' '--exclude=.git' '--exclude=tests' -x '*.pyc' -x parsetab.py -x sftp-config.json -uNr gem5/src/mem/cache/replacement_policies/ReplacementPolicies.py gem5-master/src/mem/cache/replacement_policies/ReplacementPolicies.py
--- gem5/src/mem/cache/replacement_policies/ReplacementPolicies.py	2019-02-27 17:44:28.737744158 -0700
+++ gem5-master/src/mem/cache/replacement_policies/ReplacementPolicies.py	2019-02-27 13:14:33.092319807 -0700
@@ -87,7 +87,13 @@
 class RRIPRP(BRRIPRP):
     btp = 0
 
-
+class SHiPRP(BRRIPRP):
+     type = 'SHiPRP'
+     cxx_class = 'SHiPRP'
+     cxx_header = "mem/cache/replacement_policies/ship_rp.hh"
+     max_signature = Param.Int(7," maximum signature")
+     hit_priority = Param.Bool(True,"true")
+     btp = 100
          
 class NRURP(BRRIPRP):
     btp = 0
diff '--exclude=build' '--exclude=.git' '--exclude=tests' -x '*.pyc' -x parsetab.py -x sftp-config.json -uNr gem5/src/mem/cache/replacement_policies/SConscript gem5-master/src/mem/cache/replacement_policies/SConscript
--- gem5/src/mem/cache/replacement_policies/SConscript	2019-02-27 17:44:07.797502807 -0700
+++ gem5-master/src/mem/cache/replacement_policies/SConscript	2019-02-21 22:27:14.163348519 -0700
@@ -41,4 +41,4 @@
 Source('random_rp.cc')
 Source('second_chance_rp.cc')
 Source('tree_plru_rp.cc')
-
+Source('ship_rp.cc')
diff '--exclude=build' '--exclude=.git' '--exclude=tests' -x '*.pyc' -x parsetab.py -x sftp-config.json -uNr gem5/src/mem/cache/replacement_policies/ship_rp.cc gem5-master/src/mem/cache/replacement_policies/ship_rp.cc
--- gem5/src/mem/cache/replacement_policies/ship_rp.cc	1969-12-31 17:00:00.000000000 -0700
+++ gem5-master/src/mem/cache/replacement_policies/ship_rp.cc	2019-02-27 13:14:41.920426976 -0700
@@ -0,0 +1,138 @@
+
+#include "mem/cache/replacement_policies/ship_rp.hh"
+
+#include <cassert>
+#include <memory>
+
+#include "base/logging.hh" // For fatal_if
+#include "base/random.hh"
+#include "params/SHiPRP.hh"
+
+
+
+SHiPRP::SHiPRP(const Params *p)
+    : BRRIPRP(p), maxsignature(p->max_signature), hitPriority(p->hit_priority), btp(p->btp) 
+{
+    
+    fatal_if(maxsignature < 0,"max signature shouldnt be less than zero \n");
+}
+  
+void
+SHiPRP::invalidate(const std::shared_ptr<ReplacementData>& replacement_data)
+const
+{
+     BRRIPRP::invalidate(replacement_data);
+     std::static_pointer_cast<SHiPReplData>(replacement_data)->signature_m = maxsignature + 1;
+}
+
+void
+SHiPRP::touch(const std::shared_ptr<ReplacementData>& replacement_data) const
+{
+std::shared_ptr<SHiPReplData> casted_replacement_data =
+        std::static_pointer_cast<SHiPReplData>(replacement_data);
+   
+
+int outcome =casted_replacement_data->outcome;
+
+int signature = casted_replacement_data->signature_m;
+
+if (hitPriority) {
+	outcome = true;
+        casted_replacement_data->rrpv = 0;
+	SHCT[signature]++;
+    } else if (outcome != true ) {
+        SHCT[signature]--;
+    }
+}
+
+void SHiPRP::reset(const std::shared_ptr<ReplacementData>& replacement_data) const
+{
+    std::shared_ptr<SHiPReplData> casted_replacement_data =
+        std::static_pointer_cast<SHiPReplData>(replacement_data);
+casted_replacement_data->signature_m =((casted_replacement_data->_tag >> 14)^(casted_replacement_data->_tag >> 14)^(casted_replacement_data->_tag >> 14));
+int signature = casted_replacement_data->signature_m;
+    // Reset RRPV
+    // Replacement data is inserted as "long re-reference" if lower than btp,
+   
+	    if (SHCT[signature] == 0) {
+        casted_replacement_data->rrpv = maxRRPV;
+    } else {
+        casted_replacement_data->rrpv = maxRRPV - 2;
+    }
+}
+
+ReplaceableEntry*
+SHiPRP::getVictim(const ReplacementCandidates& candidates) const
+{
+
+    // There must be at least one replacement candidate
+    assert(candidates.size() > 0);
+
+    // Use first candidate as dummy victim
+    ReplaceableEntry* victim = candidates[0];
+
+    // Store victim->rrpv in a variable to improve code readability
+    int victim_RRPV = std::static_pointer_cast<SHiPReplData>(
+                        victim->replacementData)->rrpv;
+	int victim_outcome = std::static_pointer_cast<SHiPReplData>(
+                        victim->replacementData)->outcome;
+	int victim_signature = std::static_pointer_cast<SHiPReplData>(
+                                    victim->replacementData)->signature_m;
+
+    // Visit all candidates to find victim
+    for (const auto& candidate : candidates) {
+        // Get candidate's rrpv
+        int candidate_RRPV = std::static_pointer_cast<SHiPReplData>(
+                                    candidate->replacementData)->rrpv;
+	int candidate_outcome = std::static_pointer_cast<SHiPReplData>(
+                                    candidate->replacementData)->outcome;
+	int candidate_signature = std::static_pointer_cast<SHiPReplData>(
+                                    candidate->replacementData)->signature_m;
+
+        // Stop searching for victims if an invalid entry is found
+        if (candidate_RRPV == maxRRPV + 1) {
+		
+		
+            return candidate;
+        // Update victim entry if necessary
+        } else if (candidate_RRPV > victim_RRPV) {
+            victim = candidate;
+            victim_RRPV = candidate_RRPV;
+		victim_outcome = candidate_outcome;
+		victim_signature = candidate_signature;
+        }
+    }
+
+    // Get difference of victim's RRPV to the highest possible RRPV in
+    // order to update the RRPV of all the other entries accordingly
+    int diff = maxRRPV - victim_RRPV;
+
+    // No need to update RRPV if there is no difference
+    if (diff > 0){
+        // Update RRPV of all candidates
+        for (const auto& candidate : candidates) {
+            std::static_pointer_cast<SHiPReplData>(
+                candidate->replacementData)->rrpv += diff;
+		
+        }
+    }
+if(victim_outcome != true)
+{
+	SHCT[victim_signature]--;
+}
+
+
+    return victim;
+}
+
+std::shared_ptr<ReplacementData>
+SHiPRP::instantiateEntry()
+{
+    return std::shared_ptr<ReplacementData>(new SHiPReplData(maxRRPV,maxsignature));
+}
+
+SHiPRP*
+SHiPRPParams::create()
+{
+    return new SHiPRP(this);
+}
diff '--exclude=build' '--exclude=.git' '--exclude=tests' -x '*.pyc' -x parsetab.py -x sftp-config.json -uNr gem5/src/mem/cache/replacement_policies/ship_rp.hh gem5-master/src/mem/cache/replacement_policies/ship_rp.hh
--- gem5/src/mem/cache/replacement_policies/ship_rp.hh	1969-12-31 17:00:00.000000000 -0700
+++ gem5-master/src/mem/cache/replacement_policies/ship_rp.hh	2019-02-27 13:13:44.627733570 -0700
@@ -0,0 +1,110 @@
+#ifndef __MEM_CACHE_REPLACEMENT_POLICIES_SHiP_RP_HH__
+#define __MEM_CACHE_REPLACEMENT_POLICIES_SHiP_RP_HH__
+
+#include "mem/cache/replacement_policies/base.hh"
+#include "mem/cache/replacement_policies/brrip_rp.hh"
+
+struct SHiPRPParams;
+
+class SHiPRP : public BRRIPRP
+{
+  protected:
+    /** BRRIP-specific implementation of replacement data. */
+    struct SHiPReplData : BRRIPReplData
+    {
+        /**
+         * Re-Reference Interval Prediction Value.
+         * A value equal to max_RRPV + 1 indicates an invalid entry.
+         */
+       // int rrpv;
+	
+        unsigned int signature_m;
+	bool outcome;
+        /**
+         * Default constructor. Invalidate data.
+         */
+        SHiPReplData(const int maxRRPV , int max_signature) : BRRIPReplData(maxRRPV + 1) , signature_m(max_signature + 1) ,outcome(false) {}
+    };
+
+    /**
+     * Maximum Re-Reference Prediction Value possible. An entry with this
+     * value as the rrpv has the longest possible re-reference interval,
+     * that is, it is likely not to be used in the near future, and is
+     * among the best eviction candidates.
+     * A maxRRPV of 1 implies in a NRU.
+     */
+    //const int maxRRPV;
+    const int maxsignature;
+    
+    /**
+     * The hit priority (HP) policy replaces entries that do not receive cache
+     * hits over any cache entry that receives a hit, while the frequency
+     * priority (FP) policy replaces infrequently re-referenced entries.
+     */
+    const bool hitPriority;
+
+    /**
+     * Bimodal throtle parameter. Value in the range [0,100] used to decide
+     * if a new entry is inserted with long or distant re-reference.
+     */
+    const unsigned btp;
+	mutable int SHCT[16384] = {0};
+
+  public:
+    /** Convenience typedef. */
+    typedef SHiPRPParams Params;
+
+    /**
+     * Construct and initiliaze this replacement policy.
+     */
+    SHiPRP(const Params *p);
+
+    /**
+     * Destructor.
+     */
+    ~SHiPRP() {}
+
+    /**
+     * Invalidate replacement data to set it as the next probable victim.
+     * Set RRPV as the the most distant re-reference.
+     *
+     * @param replacement_data Replacement data to be invalidated.
+     */
+    void invalidate(const std::shared_ptr<ReplacementData>& replacement_data)
+                                                              const override;
+
+    /**
+     * Touch an entry to update its replacement data.
+     *
+     * @param replacement_data Replacement data to be touched.
+     */
+    void touch(const std::shared_ptr<ReplacementData>& replacement_data) const
+                                                                     override;
+
+    /**
+     * Reset replacement data. Used when an entry is inserted.
+     * Set RRPV according to the insertion policy used.
+     *
+     * @param replacement_data Replacement data to be reset.
+     */
+    void reset(const std::shared_ptr<ReplacementData>& replacement_data) const
+                                                                     override;
+
+    /**
+     * Find replacement victim using rrpv.
+     *
+     * @param cands Replacement candidates, selected by indexing policy.
+     * @return Replacement entry to be replaced.
+     */
+    ReplaceableEntry* getVictim(const ReplacementCandidates& candidates) const
+                                                                     override;
+
+    /**
+     * Instantiate a replacement data entry.
+     *
+     * @return A shared pointer to the new replacement data.
+     */
+    std::shared_ptr<ReplacementData> instantiateEntry() override;
+};
+
+#endif 

